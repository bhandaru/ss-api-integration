//Set Variables for Smartsheet.
//Replace the values as applicable to your environment
var SMARTSHEET_TOKEN_SHEET_URL = 'https://docs.google.com/spreadsheets/d/1I3PgnnYy08iQ-fogGCxkjk6Mwo5YaNaOnfdaB8EMJTg/edit#gid=0';
var MAIN_PROJECTS_SHEETID = 1949511405856644; //Required. This the sheet id of the main sheet to which new co-creation requests are submitted.
var TEMPLATE_FOLDER_ID = 6795484187649924; //Required. This is the folder id of Co-creation projects template folder.
var DESTINATION_FOLDER_ID = 2755191272433540; //Required. This is the folder id of the destination solutions projects where the template folder should be copied to.
var DESTINATION_DOCUMENT_NAME = "Project Dashboard";//Required. This is the name of the dashboard whose URL to be updated in the main projects task sheet.
var LOOKUP_COLUMN_NAME = "Project ID";//Required. This is the column name of the auto-generated number column in the main proejects sheet. This is used to lookup the row id of the row that should be updated.
var UPDATE_COLUMN_NAME = "Project Plan";//Required. This is the name of the column that should be updated with the URL to the DESTINATION_DOCUMENT_NAME
var PCTCOMPLETE_COLUMN_NAME = "% Complete";//Required. This is the % complete column name from the projects all sheet.
var NEWPROJECT_TASK_SHEET_NAME= "Task Sheet";//Required. This is the name of the document that should be updated with the project name
var NEWPROJECT_TASK_SHEET_DESC_COLUMN_NAME = "Description";//Required. This is the name of the column that should be updated on the first row.
var NEWPROJECT_TASK_SHEET_PCTCOMPLETE_COLUMN_NAME = "% Complete";//Required. This is the % complete column name from the template task sheet.
var NEWPROJECT_TASK_SHEET_ID = "";//Leave this value empty. This is determined at runtime.
var PROCESSED_MESSAGE_LABEL = "Processed";//Required. This is the label to be assigned to the email message once it has been processed.
var ERROR_MESSAGE_LABEL = "Errors";//Required. This is the label to be assigned to the email message when their processing encounters errors.
var PROJECT_FOLDER_COLNAME = "Solution Artifacts Folder";
var NEW_APPROVED_PROJECTS_SHEETID = 467885218549636; //Sheet ID of the file that has the newly submitted and approved projects.


const destFolderName = "https://drive.google.com/drive/folders/1zsBfl4d5OWttDVHfniWrzZMBTTVcQKrO";
const destFolder = DriveApp.getFolderById(destFolderName.replace(/^.+\//, ''));

function processNewCoCreationRequests() {

  Logger.log("Starting to process messages");

  if(getSmartSheetToken_(SMARTSHEET_TOKEN_SHEET_URL) == ""){
    Logger.log("SMARTSHEET_TOKEN is invalid");
    return ;
  };

  var newProjectsResponse = sendToSmartsheet_("/sheets/"+ NEW_APPROVED_PROJECTS_SHEETID + "?level=2&include=objectValue", null, 'GET');
  Logger.log("Found " + newProjectsResponse.rows.length + " rows...");

  var newProjectRows = newProjectsResponse.rows;
  for (var i = 0; i < newProjectRows.length; i++) {
    try{
        //Process them in the order received
        var id = newProjectRows[i].id;
        //var subject = id[0].getSubject()
        Logger.log("Processing Row ID: " + id);

        var projectId = getCellValue_(newProjectsResponse, newProjectRows[i].id,"Project ID"); //jsonObject["Project ID"];
        Logger.log("Processing Project ID: " + projectId);

        var projectName = getCellValue_(newProjectsResponse, newProjectRows[i].id,"Co-Creation Project Name"); //jsonObject["Project Name"];
        var projectDashboardURL = "";
        projectId= parseInt(projectId);
        if (!isNaN(projectId))
        {
          Logger.log("Copying the Co-Creation template in Smartsheet... for Proeject ID: "+ projectId)
          projectDashboardURL = copyCoCreationProjectTemplate_(projectName.substring(0,50));
          Logger.log("Project Dashboard URL: " + projectDashboardURL);
        }
        else
        {
          Logger.log("Project ID: " + projectId + " is invalid. Deleting the email message");
          throw new Error("Project ID: " + projectId + " is invalid.");
        }

        var newFolder = destFolder.createFolder(projectName);

        //Update Main sheet with project dashboard url
        Logger.log("updating main sheet with dashboardURL on row with projectId: " + projectId)
        updateMainSheetRow_(projectId,projectDashboardURL, newFolder.getUrl());

        //Update Task Sheet with project name
        Logger.log("Updating Task Sheet's Description column on 1st row with project Name: " + projectName)
        updateTaskSheetRow_(NEWPROJECT_TASK_SHEET_ID, projectName);

        //Delete row from the newly submitted and approved projects.
        deleteRowFromSheet_(NEW_APPROVED_PROJECTS_SHEETID, id)

        Logger.log("Processed Project ID: " + projectId);
      }
    catch(err){
      Logger.log(err);
      Logger.log("Error processing Project ID: " + projectId)
    }
  }
  Logger.log("Done processing messages");
}

function copyCoCreationProjectTemplate_(newFolderName){

  var restMethod = "/folders/" + TEMPLATE_FOLDER_ID + "/copy?include=data";
  var data = { 
                "destinationType": "folder",
                "destinationId": DESTINATION_FOLDER_ID,
                "newName": newFolderName
              };

  try{
    //Copy
    var response = sendToSmartsheet_(restMethod,data,'POST');
    Logger.log("New project folder ID: " + response.result.id);
    Logger.log("New project folder name: " + response.result.name);
    var newProjectFolderId = response.result.id;
    var dashboardURL="";
    response = sendToSmartsheet_("/folders/"+ newProjectFolderId, null, 'GET');
    
    //Get Dashboard  permalink URL
    dashboardURL =  response.sights.find(s=>s.name === DESTINATION_DOCUMENT_NAME).permalink;
    Logger.log("New project dashboard URL: " + dashboardURL);

    //Get new project Task Sheet id
    NEWPROJECT_TASK_SHEET_ID = response.sheets.find(s=>s.name === NEWPROJECT_TASK_SHEET_NAME).id;
    Logger.log("New project Task Sheet ID: " + NEWPROJECT_TASK_SHEET_ID);
  }
  catch(err){
    Logger.log(err)
    throw new Error("Error copying template folder and getting dashboard URL")
  }
  return dashboardURL;
}

function updateMainSheetRow_(projectID,projectDashboardURL, projectFolderURL){

  Logger.log("Updating main project # " + projectID);
  try{
    var response = sendToSmartsheet_("/sheets/"+ MAIN_PROJECTS_SHEETID + "?level=2&include=objectValue", null, 'GET');
    var lookupColumnID = response.columns.find(t=>t.title.toUpperCase() === LOOKUP_COLUMN_NAME.toUpperCase()).id;
    var updateColumnID = response.columns.find(t=>t.title.toUpperCase() === UPDATE_COLUMN_NAME.toUpperCase()).id;
    var pctCompleteColumnID = response.columns.find(t=>t.title.toUpperCase() === PCTCOMPLETE_COLUMN_NAME.toUpperCase()).id;
    var projectFolderColumdID = response.columns.find(t=>t.title.toUpperCase() === PROJECT_FOLDER_COLNAME.toUpperCase()).id;

    //6654986651756420
    Logger.log("Column ID for " + LOOKUP_COLUMN_NAME + ": " + lookupColumnID);
    Logger.log("Column ID for " + UPDATE_COLUMN_NAME + ": " + updateColumnID);
    Logger.log("Column ID for " + PCTCOMPLETE_COLUMN_NAME + ": " + pctCompleteColumnID);
    Logger.log("Column ID for " + PROJECT_FOLDER_COLNAME + ": " + projectFolderColumdID);

    var lookupRowID= response.rows.find(r=>r.cells.find(c=>c.columnId === lookupColumnID).objectValue === projectID).id;
    Logger.log("Row ID for Project ID# " + projectID + ": "+ lookupRowID);

    //Get new project Task Sheet % Complete RowID and Column ID
    var response = sendToSmartsheet_("/sheets/"+ NEWPROJECT_TASK_SHEET_ID + "?level=2&include=objectValue", null, 'GET');
    var newSheetPctCompleteColumnID = response.columns.find(t=>t.title.toUpperCase() === NEWPROJECT_TASK_SHEET_PCTCOMPLETE_COLUMN_NAME.toUpperCase()).id;
    var newSheetPctCompleteRowID = response.rows[0].id;

    var updateData = [{
                      "id": lookupRowID,
                      "cells": [{
                                  "columnId": updateColumnID,
                                  'value'  : 'Project Dashboard',
                                  'hyperlink' : { "url": projectDashboardURL},
                                  'strict': false
                                },
                                {
                                  "columnId": projectFolderColumdID,
                                  "value": projectFolderURL,
                                  'strict' : false
                                }]
                      }];
    response = sendToSmartsheet_("/sheets/"+ MAIN_PROJECTS_SHEETID + "/rows", updateData, 'PUT');

    Logger.log("Updating Cell Links");
    updateData = [{
                      "id": lookupRowID,
                      "cells": [
                                {
                                  "columnId": pctCompleteColumnID,
                                  "value": null,
                                  'linkInFromCell' : { "columnId": newSheetPctCompleteColumnID, "rowId": newSheetPctCompleteRowID, "sheetId": NEWPROJECT_TASK_SHEET_ID}
                                }]
                      }];
    response = sendToSmartsheet_("/sheets/"+ MAIN_PROJECTS_SHEETID + "/rows", updateData, 'PUT');

  }
  catch(err)
  {
    Logger.log("Error updating main project row for Project ID: " + projectID);
    throw new Error(err);
  }
  return lookupRowID;
}

function getCellValue_(sheetData, rowID, columnName){
  Logger.log("Getting " + columnName + " value for rowID: " +  rowID );
  var cellValue = "";
  var columnID =  "";
  try{
      columnID = sheetData.columns.find(t=>t.title.toUpperCase() === columnName.toUpperCase()).id;
      if (sheetData.rows.find(r=>r.id === rowID).cells.find(c=>c.columnId === columnID).value != null)
      {
        cellValue = sheetData.rows.find(r=>r.id === rowID).cells.find(c=>c.columnId === columnID).value;
      }
      Logger.log("Value of " + columnName + " at rowId: " + rowID + " = " +  cellValue );
  }
  catch(err)
  {
    Logger.log("Error getting cell value for rowID: " + rowID);
    throw new Error(err);
  }
  return cellValue;
}

function deleteRowFromSheet_(sheetID, rowID){
  try{
    var response = sendToSmartsheet_("/sheets/"+ sheetID +"/rows?ids="+ rowID + "&ignoreRowsNotFound=true", null, 'DELETE');
  }
  catch(err){
    Logger.log(err)
    throw new Error("Errror deleting row: " + rowID + " from sheetID: " + sheetID);
  }
  return;
}

function updateTaskSheetRow_(taskSheetId, projectName){

  try{

    var response = sendToSmartsheet_("/sheets/"+ taskSheetId + "?level=2&include=objectValue", null, 'GET');
    var lookupColumnID = response.columns.find(t=>t.title.toUpperCase() === "DESCRIPTION".toUpperCase()).id;
    Logger.log("Column ID for Description: " + lookupColumnID);
    var lookupRowID= response.rows[0].id;
    var updateData = [{
                      "id": lookupRowID,
                      "cells": [{
                                  "columnId": lookupColumnID,
                                  'value'  : projectName,
                                  'strict': false
                                }]
                      }];
    response = sendToSmartsheet_("/sheets/"+ taskSheetId + "/rows", updateData, 'PUT');
  }
  catch(err){
    Logger.log(err)
  }
  return;
}

function sendToSmartsheet_(restEndpoint, formData, httpMethod){
  try{
    var SMARTSHEET_ACCESS_TOKEN = getSmartSheetToken_(SMARTSHEET_TOKEN_SHEET_URL);

    Logger.log("Calling Smartsheet API endpoint: "+ restEndpoint + " using http " + httpMethod + " method");
    const restURL = "https://api.smartsheet.com/2.0" + restEndpoint;
    const headers = { 
        "Authorization" : "Bearer " + SMARTSHEET_ACCESS_TOKEN
      };
    
    var options = { 
      'method' : httpMethod,
      'contentType': 'application/json',
      'headers': headers
    };

    if (httpMethod.toUpperCase() == 'POST' || httpMethod.toUpperCase() == 'PUT')
    {
      options.payload=JSON.stringify(formData);
    }

    if (formData != null ) Logger.log("Request data: \n"+ JSON.stringify(formData));
    const response = UrlFetchApp.fetch(restURL, options);
    Logger.log("Response data: \n"+ response);
    var data = JSON.parse(response);
  }
  catch(err)
  {
    Logger.log(err)
  }
  //Return
  return data
}

function getSmartSheetToken_(sheetURL){
  try{
    var sheet = SpreadsheetApp.openByUrl(sheetURL);
    var keyName = sheet.getRange('A1').getValue();
    var keyValue = sheet.getRange('B1').getValue();
  }
  catch(err){
    Logger.log(err)
  }
  if (keyName != 'SMARTSHEET_ACCESS_TOKEN'){
    throw new Error("SMARTSHEET_ACCESS_TOKEN  not found in key file");
  }
  if (keyValue == ""){
    throw new Error("SMARTSHEET_ACCESS_TOKEN value is empty");
  }
  return keyValue;
}
